name: Binary Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for the release (optional - will auto-generate if empty)'
        required: false

permissions:
  contents: write
  packages: write

jobs:
  build-and-release:
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate automatic tag
        id: generate_tag
        run: |
          if [ -n "${{ github.event.inputs.tag_name }}" ]; then
            echo "tag_name=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
          else
            # Generate automatic version based on date and commit
            DATE=$(date +%Y.%m.%d)
            SHORT_SHA=$(git rev-parse --short HEAD)
            COMMIT_COUNT=$(git rev-list --count HEAD)
            TAG_NAME="v${DATE}-${COMMIT_COUNT}-${SHORT_SHA}"
            echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
            echo "Generated automatic tag: ${TAG_NAME}"
          fi

      - name: Install build dependencies and Haskell Stack
        run: |
          echo "Installing required build tools..."
          sudo apt-get update
          sudo apt-get install -y build-essential make curl dpkg

          echo "Installing Haskell Stack..."
          if ! command -v stack &> /dev/null; then
            curl -sSL https://get.haskellstack.org/ | sh
            echo 'export PATH="$HOME/.local/bin:$PATH"' >> $HOME/.bashrc
            export PATH="$HOME/.local/bin:$PATH"
          else
            echo "Stack already installed"
          fi

          echo "Verifying Stack installation..."
          stack --version || true

      - name: Cache Stack dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.stack
            .stack-work
          key: ${{ runner.os }}-stack-${{ hashFiles('**/*.yaml') }}-${{ hashFiles('**/*.cabal') }}
          restore-keys: |
            ${{ runner.os }}-stack-

      - name: Build binary
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          make re

      - name: Optimize binary
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          # Strip debugging symbols to reduce size
          if command -v strip >/dev/null 2>&1; then
            strip glados || echo "Strip failed or not available"
          fi
          # Make sure binary is executable
          chmod +x glados

      - name: Package .deb
        run: |
          export PATH="$HOME/.local/bin:$PATH"

          TAG="${{ steps.generate_tag.outputs.tag_name }}"
          VERSION="${TAG#v}"

          PKG_NAME="glados"
          ARCH="amd64"
          BUILD_DIR="./pkg/${PKG_NAME}_${VERSION}_${ARCH}"
          DIST_DIR="./dist"

          echo "Packaging ${PKG_NAME} version ${VERSION} for ${ARCH}"

          rm -rf "${BUILD_DIR}" "${DIST_DIR}"
          mkdir -p "${BUILD_DIR}/DEBIAN" "${BUILD_DIR}/usr/local/bin" "${DIST_DIR}"

          cp glados "${BUILD_DIR}/usr/local/bin/glados"
          chmod 0755 "${BUILD_DIR}/usr/local/bin/glados"

          echo "Package: ${PKG_NAME}" > "${BUILD_DIR}/DEBIAN/control"
          echo "Version: ${VERSION}" >> "${BUILD_DIR}/DEBIAN/control"
          echo "Section: utils" >> "${BUILD_DIR}/DEBIAN/control"
          echo "Priority: optional" >> "${BUILD_DIR}/DEBIAN/control"
          echo "Architecture: ${ARCH}" >> "${BUILD_DIR}/DEBIAN/control"
          echo "Maintainer: GLaDOS Maintainers <noreply@example.com>" >> "${BUILD_DIR}/DEBIAN/control"
          echo "Description: GLaDOS Lisp Interpreter" >> "${BUILD_DIR}/DEBIAN/control"
          echo " A small Lisp interpreter compiled from this repository." >> "${BUILD_DIR}/DEBIAN/control"

          chmod 0644 "${BUILD_DIR}/DEBIAN/control"

          dpkg-deb --build "${BUILD_DIR}" "${DIST_DIR}/${PKG_NAME}_${VERSION}_${ARCH}.deb" || (echo "dpkg-deb failed" && exit 1)

          echo "Created package: ${DIST_DIR}/${PKG_NAME}_${VERSION}_${ARCH}.deb"
          ls -la "${DIST_DIR}"

      - name: Verify binary
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          ls -la glados || true
          echo "Binary size: $(du -h glados | cut -f1 || true)"

      - name: Create Release and Upload Binary
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ steps.generate_tag.outputs.tag_name }}
          name: GLaDOS Release ${{ steps.generate_tag.outputs.tag_name }}
          files: |
            ./glados
            ./dist/*.deb
          body: |
            ## GLaDOS Lisp Interpreter

            **Release:** ${{ steps.generate_tag.outputs.tag_name }}
            **Commit:** `${{ github.sha }}`

            ### Download
            Download the `glados` binary below.

            ### Quick Start
            ```bash
            # Make executable and run
            chmod +x glados
            ./glados your_file.lisp
            ```

            ### Latest Changes
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false
          overwrite: true
