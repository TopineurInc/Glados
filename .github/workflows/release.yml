name: Binary Release

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for the release (optional - will auto-generate if empty)'
        required: false

permissions:
  contents: write
  packages: write

jobs:
  build-and-release:
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate automatic tag
        id: generate_tag
        run: |
          if [ -n "${{ github.event.inputs.tag_name }}" ]; then
            echo "tag_name=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
          else
            # Generate automatic version based on date and commit
            DATE=$(date +%Y.%m.%d)
            SHORT_SHA=$(git rev-parse --short HEAD)
            COMMIT_COUNT=$(git rev-list --count HEAD)
            TAG_NAME="v${DATE}-${COMMIT_COUNT}-${SHORT_SHA}"
            echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
            echo "Generated automatic tag: ${TAG_NAME}"
          fi

      - name: Install build dependencies and Haskell Stack
        run: |
          echo "Installing required build tools..."
          sudo apt-get update
          sudo apt-get install -y build-essential make curl dpkg rpm file

          echo "Installing Haskell Stack..."
          if ! command -v stack &> /dev/null; then
            curl -sSL https://get.haskellstack.org/ | sh
            echo 'export PATH="$HOME/.local/bin:$PATH"' >> $HOME/.bashrc
            export PATH="$HOME/.local/bin:$PATH"
          else
            echo "Stack already installed"
          fi

          echo "Verifying Stack installation..."
          stack --version || true

      - name: Cache Stack dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.stack
            .stack-work
          key: ${{ runner.os }}-stack-${{ hashFiles('**/*.yaml') }}-${{ hashFiles('**/*.cabal') }}
          restore-keys: |
            ${{ runner.os }}-stack-

      - name: Build binary
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          make re

      - name: Optimize binary
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          # Strip debugging symbols to reduce size
          if command -v strip >/dev/null 2>&1; then
            strip glados || echo "Strip failed or not available"
          fi
          # Make sure binary is executable
          chmod +x glados

      - name: Package .deb
        run: |
          export PATH="$HOME/.local/bin:$PATH"

          TAG="${{ steps.generate_tag.outputs.tag_name }}"
          VERSION="${TAG#v}"

          PKG_NAME="glados"
          ARCH="amd64"
          BUILD_DIR="./pkg/${PKG_NAME}_${VERSION}_${ARCH}"
          DIST_DIR="./dist"

          echo "Packaging ${PKG_NAME} version ${VERSION} for ${ARCH}"

          rm -rf "${BUILD_DIR}" "${DIST_DIR}"
          mkdir -p "${BUILD_DIR}/DEBIAN" "${BUILD_DIR}/usr/local/bin" "${DIST_DIR}"

          cp glados "${BUILD_DIR}/usr/local/bin/glados"
          chmod 0755 "${BUILD_DIR}/usr/local/bin/glados"

          echo "Package: ${PKG_NAME}" > "${BUILD_DIR}/DEBIAN/control"
          echo "Version: ${VERSION}" >> "${BUILD_DIR}/DEBIAN/control"
          echo "Section: utils" >> "${BUILD_DIR}/DEBIAN/control"
          echo "Priority: optional" >> "${BUILD_DIR}/DEBIAN/control"
          echo "Architecture: ${ARCH}" >> "${BUILD_DIR}/DEBIAN/control"
          echo "Maintainer: GLaDOS Maintainers <noreply@example.com>" >> "${BUILD_DIR}/DEBIAN/control"
          echo "Description: GLaDOS Lisp Interpreter" >> "${BUILD_DIR}/DEBIAN/control"
          echo " A small Lisp interpreter compiled from this repository." >> "${BUILD_DIR}/DEBIAN/control"

          chmod 0644 "${BUILD_DIR}/DEBIAN/control"

          dpkg-deb --build "${BUILD_DIR}" "${DIST_DIR}/${PKG_NAME}_${VERSION}_${ARCH}.deb" || (echo "dpkg-deb failed" && exit 1)

          echo "Created package: ${DIST_DIR}/${PKG_NAME}_${VERSION}_${ARCH}.deb"
          ls -la "${DIST_DIR}"

      - name: Package .rpm
        run: |
          export PATH="$HOME/.local/bin:$PATH"

          TAG="${{ steps.generate_tag.outputs.tag_name }}"
          VERSION="${TAG#v}"

          RPM_VERSION=$(echo "${VERSION}" | tr '-' '_')

          PKG_NAME="glados"
          ARCH="x86_64"
          ROOT_DIR="$(pwd)"
          BUILD_ROOT="${ROOT_DIR}/rpmroot"
          DIST_DIR="${ROOT_DIR}/dist"

          echo "Packaging ${PKG_NAME} version ${RPM_VERSION} for ${ARCH}"

          rm -rf "${BUILD_ROOT}" "${ROOT_DIR}/rpmbuild"
          mkdir -p "${BUILD_ROOT}/usr/local/bin" "${DIST_DIR}"

          cp glados "${BUILD_ROOT}/usr/local/bin/glados"
          chmod 0755 "${BUILD_ROOT}/usr/local/bin/glados"

          SPEC_FILE="${ROOT_DIR}/${PKG_NAME}.spec"
          cat > "${SPEC_FILE}" <<EOF
          Name:           ${PKG_NAME}
          Version:        ${RPM_VERSION}
          Release:        1
          Summary:        GLaDOS Lisp Interpreter
          License:        MIT
          Group:          Applications/System
          BuildArch:      ${ARCH}
          Prefix:         /usr/local
          AutoReqProv:    no

          %description
          A small Lisp interpreter compiled from this repository.

          %install
          mkdir -p %{buildroot}/usr/local/bin
          cp -a ${BUILD_ROOT}/usr/local/bin/glados %{buildroot}/usr/local/bin/

          %files
          /usr/local/bin/glados

          %changelog
          * $(date +"%a %b %d %Y") GLaDOS Maintainers <glados@epitech.eu> - ${RPM_VERSION}-1
          - Initial RPM release
          EOF

          # Build RPM
          rpmbuild \
            --define "_topdir ${ROOT_DIR}/rpmbuild" \
            --define "_buildrootdir ${ROOT_DIR}/rpmbuild/BUILDROOT" \
            -bb "${SPEC_FILE}"

          # Move resulting .rpm to ./dist
          find "${ROOT_DIR}/rpmbuild" -name "*.rpm" -exec mv {} "${DIST_DIR}/" \;

          echo "Created RPM package:"
          ls -la "${DIST_DIR}"/*.rpm

      - name: Package .AppImage
        run: |
          export PATH="$HOME/.local/bin:$PATH"

          TAG="${{ steps.generate_tag.outputs.tag_name }}"
          VERSION="${TAG#v}"
          PKG_NAME="glados"
          ARCH="x86_64"
          DIST_DIR="./dist"
          APPDIR="${PKG_NAME}.AppDir"

          echo "Packaging ${PKG_NAME} version ${VERSION} as AppImage"

          rm -rf "${APPDIR}"
          mkdir -p "${APPDIR}/usr/bin" "${APPDIR}/usr/share/icons/hicolor/256x256/apps" "${DIST_DIR}"

          cp glados "${APPDIR}/usr/bin/glados"
          chmod +x "${APPDIR}/usr/bin/glados"

          cat > "${APPDIR}/${PKG_NAME}.desktop" <<EOF
          [Desktop Entry]
          Name=GLaDOS
          Exec=glados
          Icon=glados
          Type=Application
          Categories=Utility;
          Comment=GLaDOS Lisp Interpreter
          EOF

          sudo apt-get update -qq
          sudo apt-get install -y imagemagick -qq
          convert -size 256x256 xc:lightgray -gravity center -pointsize 72 -annotate 0 "G" "${APPDIR}/glados.png"

          mkdir -p "${APPDIR}/usr/share/icons/hicolor/256x256/apps"
          cp "${APPDIR}/glados.png" "${APPDIR}/usr/share/icons/hicolor/256x256/apps/glados.png"

          cat > "${APPDIR}/AppRun" <<'EOF'
          #!/bin/bash
          HERE="$(dirname "$(readlink -f "${0}")")"
          export PATH="${HERE}/usr/bin:${PATH}"
          exec "${HERE}/usr/bin/glados" "$@"
          EOF
          chmod +x "${APPDIR}/AppRun"

          APPIMAGETOOL_URL="https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
          echo "Downloading appimagetool from: $APPIMAGETOOL_URL"
          curl -L "$APPIMAGETOOL_URL" -o appimagetool
          chmod +x appimagetool

          ./appimagetool --appimage-extract-and-run "${APPDIR}" "${DIST_DIR}/${PKG_NAME}-${VERSION}-${ARCH}.AppImage"

          chmod +x "${DIST_DIR}/${PKG_NAME}-${VERSION}-${ARCH}.AppImage"

          ls -lh "${DIST_DIR}"/*.AppImage

      - name: Verify binary
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          ls -la glados || true
          echo "Binary size: $(du -h glados | cut -f1 || true)"

      - name: Create Release and Upload Binary
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ steps.generate_tag.outputs.tag_name }}
          name: GLaDOS Release ${{ steps.generate_tag.outputs.tag_name }}
          files: |
            ./glados
            ./dist/*.deb
            ./dist/*.rpm
            ./dist/*.AppImage
          body: |
            ## GLaDOS Lisp Interpreter

            **Release:** ${{ steps.generate_tag.outputs.tag_name }}
            **Commit:** `${{ github.sha }}`

            ### Download
            Download the `glados` binary below.

            ### Quick Start
            ```bash
            # Make executable and run
            chmod +x glados
            ./glados your_file.lisp
            ```

            ### Latest Changes
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false
