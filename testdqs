=== S-Expression ===
SList [SAtom (ASymbol "define") (Just (SourcePos {spLine = 1, spCol = 2})),SList [SAtom (ASymbol "fact") (Just (SourcePos {spLine = 1, spCol = 10})),SAtom (ASymbol "n") (Just (SourcePos {spLine = 1, spCol = 15}))] (Just (SourcePos {spLine = 1, spCol = 9})),SList [SAtom (ASymbol "if") (Just (SourcePos {spLine = 2, spCol = 4})),SList [SAtom (ASymbol "eq?") (Just (SourcePos {spLine = 2, spCol = 8})),SAtom (ASymbol "n") (Just (SourcePos {spLine = 2, spCol = 12})),SAtom (AInteger 1) (Just (SourcePos {spLine = 2, spCol = 14}))] (Just (SourcePos {spLine = 2, spCol = 7})),SAtom (AInteger 1) (Just (SourcePos {spLine = 3, spCol = 7})),SList [SAtom (ASymbol "*") (Just (SourcePos {spLine = 4, spCol = 8})),SAtom (ASymbol "n") (Just (SourcePos {spLine = 4, spCol = 10})),SList [SAtom (ASymbol "fact") (Just (SourcePos {spLine = 4, spCol = 13})),SList [SAtom (ASymbol "-") (Just (SourcePos {spLine = 4, spCol = 19})),SAtom (ASymbol "n") (Just (SourcePos {spLine = 4, spCol = 21})),SAtom (AInteger 1) (Just (SourcePos {spLine = 4, spCol = 23}))] (Just (SourcePos {spLine = 4, spCol = 18}))] (Just (SourcePos {spLine = 4, spCol = 12}))] (Just (SourcePos {spLine = 4, spCol = 7}))] (Just (SourcePos {spLine = 2, spCol = 3}))] (Just (SourcePos {spLine = 1, spCol = 1}))

=== AST ===
EDefine "fact" (ELambda ["n"] (EIf (EApp (EVar "eq?") [EVar "n",EInt 1]) (EInt 1) (EApp (EVar "*") [EVar "n",EApp (EVar "fact") [EApp (EVar "-") [EVar "n",EInt 1]]])))
